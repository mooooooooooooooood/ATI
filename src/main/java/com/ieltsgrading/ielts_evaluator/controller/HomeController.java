package com.ieltsgrading.ielts_evaluator.controller;

import com.ieltsgrading.ielts_evaluator.model.User;
import com.ieltsgrading.ielts_evaluator.service.UserService;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

/**
 * Home Controller
 * Handles homepage and dashboard routes
 */
@Controller
public class HomeController {

    @Autowired
    private UserService userService;

    /**
     * Homepage - Hi·ªÉn th·ªã cho c·∫£ guest v√† user ƒë√£ ƒëƒÉng nh·∫≠p
     * @return index.html (1 trang chung cho c·∫£ guest v√† user)
     */
    @GetMapping("/")
    public String home(Model model, HttpSession session) {
        model.addAttribute("pageTitle", "IELTS Test With AI");
        
        // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p t·ª´ Spring Security
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        boolean isLoggedIn = auth != null && auth.isAuthenticated()
                && !auth.getName().equals("anonymousUser");
        
        if (isLoggedIn) {
            try {
                // L·∫•y user t·ª´ database d·ª±a tr√™n email
                String email = auth.getName();
                User user = userService.getUserByEmail(email);
                
                // ƒê·ªìng b·ªô v·ªõi session
                session.setAttribute("loggedInUser", user);
                
                // Th√™m v√†o model ƒë·ªÉ header hi·ªÉn th·ªã ƒë√∫ng
                model.addAttribute("isLoggedIn", true);
                model.addAttribute("userName", user.getName());
                model.addAttribute("user", user);
                
                System.out.println("‚úÖ User logged in: " + user.getName());
            } catch (Exception e) {
                // N·∫øu kh√¥ng t√¨m th·∫•y user, clear session
                session.removeAttribute("loggedInUser");
                model.addAttribute("isLoggedIn", false);
                System.err.println("‚ùå Error loading user: " + e.getMessage());
            }
        } else {
            // Guest mode
            session.removeAttribute("loggedInUser");
            model.addAttribute("isLoggedIn", false);
            System.out.println("üë§ Guest accessing homepage");
        }
        
        return "index"; // ‚úÖ Tr·∫£ v·ªÅ index.html cho c·∫£ guest v√† user
    }

    /**
     * Redirect /home v·ªÅ /
     * (N·∫øu c√≥ ai ƒë√≥ truy c·∫≠p /home)
     */
    @GetMapping("/home")
    public String homeRedirect() {
        return "redirect:/";
    }

    /**
     * Redirect /index v·ªÅ /
     * (N·∫øu c√≥ ai ƒë√≥ truy c·∫≠p /index)
     */
    @GetMapping("/index")
    public String indexRedirect() {
        return "redirect:/";
    }

    /**
     * Dashboard page - CH·ªà cho user ƒë√£ ƒëƒÉng nh·∫≠p
     * Hi·ªÉn th·ªã th·ªëng k√™ c√° nh√¢n, k·∫øt qu·∫£ test, ...
     * @return dashboard.html
     */
    @GetMapping("/dashboard")
    public String dashboard(Model model, HttpSession session) {
        // Ki·ªÉm tra Spring Security
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth == null || !auth.isAuthenticated() || auth.getName().equals("anonymousUser")) {
            System.out.println("üö´ Unauthorized access to dashboard");
            return "redirect:/user/login?redirect=/dashboard";
        }
        
        try {
            // L·∫•y user t·ª´ database
            String email = auth.getName();
            User user = userService.getUserByEmail(email);
            
            // ƒê·ªìng b·ªô session
            session.setAttribute("loggedInUser", user);
            
            model.addAttribute("pageTitle", "Dashboard - IELTS Test With AI");
            model.addAttribute("user", user);
            model.addAttribute("isLoggedIn", true);
            
            System.out.println("üìä Dashboard loaded for: " + user.getName());
            return "dashboard";
        } catch (Exception e) {
            // N·∫øu c√≥ l·ªói, redirect v·ªÅ login
            session.removeAttribute("loggedInUser");
            System.err.println("‚ùå Dashboard error: " + e.getMessage());
            return "redirect:/user/login";
        }
    }

    /**
     * Require login page - Th√¥ng b√°o c·∫ßn ƒëƒÉng nh·∫≠p
     * @return require-login.html
     */
    @GetMapping("/require-login")
    public String requireLogin(Model model, HttpSession session) {
        // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p r·ªìi, redirect v·ªÅ trang ch·ªß
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated() && !auth.getName().equals("anonymousUser")) {
            System.out.println("üîÑ Already logged in, redirecting to homepage");
            return "redirect:/";
        }
        
        model.addAttribute("pageTitle", "Login Required - IELTS Test With AI");
        return "require-login";
    }

    /**
     * About page
     * @return about.html
     */
    @GetMapping("/about")
    public String about(Model model, HttpSession session) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        boolean isLoggedIn = auth != null && auth.isAuthenticated()
                && !auth.getName().equals("anonymousUser");
        
        model.addAttribute("pageTitle", "About Us - IELTS Test With AI");
        model.addAttribute("isLoggedIn", isLoggedIn);
        
        if (isLoggedIn) {
            try {
                User user = userService.getUserByEmail(auth.getName());
                session.setAttribute("loggedInUser", user);
                model.addAttribute("userName", user.getName());
            } catch (Exception e) {
                // Ignore
            }
        }
        
        return "about";
    }

    /**
     * Contact page
     * @return contact.html
     */
    @GetMapping("/contact")
    public String contact(Model model, HttpSession session) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        boolean isLoggedIn = auth != null && auth.isAuthenticated()
                && !auth.getName().equals("anonymousUser");
        
        model.addAttribute("pageTitle", "Contact Us - IELTS Test With AI");
        model.addAttribute("isLoggedIn", isLoggedIn);
        
        if (isLoggedIn) {
            try {
                User user = userService.getUserByEmail(auth.getName());
                session.setAttribute("loggedInUser", user);
                model.addAttribute("userName", user.getName());
            } catch (Exception e) {
                // Ignore
            }
        }
        
        return "contact";
    }

    /**
     * Helper method: Sync user to session from Spring Security
     * (C√≥ th·ªÉ d√πng l·∫°i ·ªü c√°c controller kh√°c)
     */
    private void syncUserToSession(HttpSession session) {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated() && !auth.getName().equals("anonymousUser")) {
            try {
                User user = userService.getUserByEmail(auth.getName());
                session.setAttribute("loggedInUser", user);
                System.out.println("üîÑ Session synced for: " + user.getName());
            } catch (Exception e) {
                session.removeAttribute("loggedInUser");
                System.err.println("‚ùå Sync failed: " + e.getMessage());
            }
        } else {
            session.removeAttribute("loggedInUser");
        }
    }
}